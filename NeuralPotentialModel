```python
import numpy as np
from scipy.constants import R, F
from typing import Dict, Optional

class RestingMembranePotential:
    def __init__(self, T: float = 310.0, P: Optional[Dict[str, float]] = None, C: Optional[Dict[str, Dict[str, float]]] = None):
        self.T = T
        self.R = R
        self.F = F
        self.P = P or {'K': 1.0, 'Na': 0.04, 'Cl': 0.45}
        self.C = C or {
            'K': {'i': 140e-3, 'o': 5e-3},
            'Na': {'i': 10e-3, 'o': 145e-3},
            'Cl': {'i': 7e-3, 'o': 120e-3}
        }
        self._validate()

    def _validate(self) -> None:
        if not all(k in self.P for k in ['K', 'Na', 'Cl']):
            raise ValueError("Missing permeability for K, Na, or Cl")
        if not all(k in self.C and 'i' in self.C[k] and 'o' in self.C[k] for k in ['K', 'Na', 'Cl']):
            raise ValueError("Invalid ion concentration structure")
        if any(v <= 0 for k in self.C for v in self.C[k].values()):
            raise ValueError("Concentrations must be positive")
        if any(v < 0 for v in self.P.values()):
            raise ValueError("Permeabilities must be non-negative")

    def compute(self) -> float:
        num = sum(self.P[k] * (self.C[k]['o'] if k != 'Cl' else self.C[k]['i']) for k in self.P)
        den = sum(self.P[k] * (self.C[k]['i'] if k != 'Cl' else self.C[k]['o']) for k in self.P)
        if den == 0:
            raise ValueError("Denominator cannot be zero")
        return (self.R * self.T / self.F) * np.log(num / den) * 1000
```

```python
import numpy as np
from numba import jit
from scipy.integrate import solve_ivp
from typing import Dict, Optional, Tuple

class NeuralPotentialModel:
    def __init__(self, params: Dict[str, float]):
        self.p = params
        self._validate()

    def _validate(self) -> None:
        required = {'C_m', 'g_Na', 'g_K', 'g_Ca', 'g_leak', 'E_Na', 'E_K', 'E_Ca', 'E_leak', 'k_buff', 'k_pump', 'n', 'K_d'}
        if not all(k in self.p for k in required):
            raise ValueError(f"Missing parameters: {required - set(self.p)}")
        if any(v <= 0 for k, v in self.p.items() if k in {'C_m', 'g_Na', 'g_K', 'g_Ca', 'g_leak', 'k_buff', 'k_pump', 'n', 'K_d'}):
            raise ValueError("Parameters must be positive")

    @jit(nopython=True)
    def _derivatives(self, t: float, y: np.ndarray, I_ext: float) -> np.ndarray:
        V, m, h, n, Ca = y
        V_mV = V * 1000
        a_m = (2.5 - 0.1 * V_mV) / (np.exp(2.5 - 0.1 * V_mV) - 1 + 1e-10)
        b_m = 4 * np.exp(-V_mV / 18)
        a_h = 0.07 * np.exp(-V_mV / 20)
        b_h = 1 / (np.exp(3 - 0.1 * V_mV) + 1)
        a_n = (0.1 - 0.01 * V_mV) / (np.exp(1 - 0.1 * V_mV) - 1 + 1e-10)
        b_n = 0.125 * np.exp(-V_mV / 80)
        
        I_Na = self.p['g_Na'] * m**3 * h * (V - self.p['E_Na'])
        I_K = self.p['g_K'] * n**4 * (V - self.p['E_K'])
        I_Ca = self.p['g_Ca'] * (V - self.p['E_Ca'])
        I_leak = self.p['g_leak'] * (V - self.p['E_leak'])
        
        return np.array([
            (-I_Na - I_K - I_Ca - I_leak + I_ext) / self.p['C_m'],
            a_m * (1 - m) - b_m * m,
            a_h * (1 - h) - b_h * h,
            a_n * (1 - n) - b_n * n,
            I_Ca - self.p['k_buff'] * Ca - self.p['k_pump'] * Ca
        ])

    def simulate(self, t_span: Tuple[float, float], I_ext: float = 10e-9, y0: Optional[np.ndarray] = None) -> Dict[str, np.ndarray]:
        y0 = y0 or self._init_state()
        sol = solve_ivp(
            fun=lambda t, y: self._derivatives(t, y, I_ext),
            t_span=t_span,
            y0=y0,
            method='RK23',
            t_eval=np.linspace(t_span[0], t_span[1], 500),
            rtol=1e-6,
            atol=1e-8
        )
        if not sol.success:
            raise RuntimeError("Integration failed")
        release = (sol.y[4]**self.p['n']) / (self.p['K_d']**self.p['n'] + sol.y[4]**self.p['n'] + 1e-10)
        return {
            't': sol.t,
            'V_m': sol.y[0] * 1000,
            'Ca': sol.y[4],
            'release': release
        }

    def _init_state(self) -> np.ndarray:
        V0 = -70e-3
        V_mV = V0 * 1000
        a_m = (2.5 - 0.1 * V_mV) / (np.exp(2.5 - 0.1 * V_mV) - 1 + 1e-10)
        b_m = 4 * np.exp(-V_mV / 18)
        a_h = 0.07 * np.exp(-V_mV / 20)
        b_h = 1 / (np.exp(3 - 0.1 * V_mV) + 1)
        a_n = (0.1 - 0.01 * V_mV) / (np.exp(1 - 0.1 * V_mV) - 1 + 1e-10)
        b_n = 0.125 * np.exp(-V_mV / 80)
        return np.array([V0, a_m / (a_m + b_m + 1e-10), a_h / (a_h + b_h + 1e-10), a_n / (a_n + b_n + 1e-10), 0.0])
```

```python
import numpy as np
from typing import Optional

class CalciumDynamics:
    def __init__(self, k_buff: float = 100.0, k_pump: float = 500.0, n: float = 4.0, K_d: float = 15e-6):
        self.k_buff = k_buff
        self.k_pump = k_pump
        self.n = n
        self.K_d = K_d
        self._validate()

    def _validate(self) -> None:
        if any(v <= 0 for v in [self.k_buff, self.k_pump, self.n, self.K_d]):
            raise ValueError("Parameters must be positive")

    def release_rate(self, Ca: np.ndarray) -> np.ndarray:
        return (Ca**self.n) / (self.K_d**self.n + Ca**self.n + 1e-10)
```

```python
import numpy as np
from numba import jit
from typing import Optional

class FractalDynamics:
    def __init__(self, beta: float = 1.8, f_min: float = 1.0, f_max: float = 1000.0, n_freqs: int = 50):
        self.beta = beta
        self.f_min = f_min
        self.f_max = f_max
        self.n_freqs = n_freqs
        self._validate()

    def _validate(self) -> None:
        if any(v <= 0 for v in [self.beta, self.f_min, self.f_max, self.n_freqs]):
            raise ValueError("Parameters must be positive")

    @jit(nopython=True)
    def _generate_noise(self, t: np.ndarray) -> np.ndarray:
        freqs = np.logspace(np.log10(self.f_min), np.log10(self.f_max), self.n_freqs)
        amplitudes = freqs**(-self.beta / 2)
        phases = np.random.uniform(0, 2 * np.pi, self.n_freqs)
        signal = np.zeros_like(t)
        for i in range(self.n_freqs):
            signal += amplitudes[i] * np.sin(2 * np.pi * freqs[i] * t + phases[i])
        return signal / (np.std(signal) + 1e-10)

    def generate(self, t: np.ndarray) -> np.ndarray:
        return self._generate_noise(t)
```

```python
import numpy as np
from joblib import Parallel, delayed
from typing import Dict, List, Optional, Tuple
from .models import RestingMembranePotential, NeuralPotentialModel, FractalDynamics
from ..utils import load_config

class Simulator:
    def __init__(self, config_path: str):
        self.config = load_config(config_path)
        self.rmp = RestingMembranePotential(**self.config['rmp'])
        self.neural = NeuralPotentialModel(self.config['neural'])
        self.fractal = FractalDynamics(**self.config['fractal'])
        self.t_span = tuple(self.config['t_span'])
        self.I_ext = self.config['I_ext']
        self._validate()

    def _validate(self) -> None:
        if not (0 <= self.t_span[0] < self.t_span[1]):
            raise ValueError("Invalid t_span")
        if self.I_ext < 0:
            raise ValueError("I_ext must be non-negative")

    def run(self, I_ext: Optional[float] = None) -> Dict[str, np.ndarray]:
        I_ext = I_ext or self.I_ext
        V0 = self.rmp.compute() / 1000
        y0 = np.array([V0] + list(self.neural._init_state()[1:]))
        results = self.neural.simulate(self.t_span, I_ext, y0)
        results['fractal_noise'] = self.fractal.generate(results['t'])
        return results

    def run_parallel(self, I_ext_values: List[float], n_jobs: int = -1) -> List[Dict[str, np.ndarray]]:
        return Parallel(n_jobs=n_jobs, backend='loky')(
            delayed(self.run)(I_ext) for I_ext in I_ext_values
        )
```

```python
import numpy as np
from typing import Optional

class Geometry:
    def __init__(self, radius: float = 1.0, az_diam: float = 0.3):
        self.r = radius
        self.az_diam = az_diam
        self._validate()

    def _validate(self) -> None:
        if any(v <= 0 for v in [self.r, self.az_diam]):
            raise ValueError("Geometry parameters must be positive")

    def area(self) -> float:
        return 4 * np.pi * self.r**2

    def channels(self, density: float) -> int:
        if density < 0:
            raise ValueError("Density must be non-negative")
        return np.random.poisson(density * self.area())

    def cable(self, V: np.ndarray, x: np.ndarray, r_m: float, r_i: float, C_m: float) -> np.ndarray:
        if any(v <= 0 for v in [r_m, r_i, C_m]):
            raise ValueError("Cable parameters must be positive")
        l = np.sqrt(r_m / r_i)
        tau = r_m * C_m
        d2V_dx2 = np.gradient(np.gradient(V, x), x)
        return (l**2 * d2V_dx2 - V) / tau
```

```python
from joblib import Parallel, delayed
from typing import List
from .simulator import Simulator

class DistributedSimulator:
    def __init__(self, config_path: str, n_neurons: int):
        self.sim = Simulator(config_path)
        self.n = n_neurons
        if n_neurons <= 0:
            raise ValueError("Number of neurons must be positive")

    def run(self, I_ext_values: List[float], n_jobs: int = -1) -> List[Dict[str, np.ndarray]]:
        return Parallel(n_jobs=n_jobs, backend='loky')(
            delayed(self.sim.run)(I_ext) for I_ext in I_ext_values * self.n
        )
```

```python
import numpy as np
from typing import Dict

class Preprocessor:
    def __init__(self, normalize: bool = True):
        self.norm = normalize

    def process(self, data: Dict) -> Dict:
        d = data.copy()
        if self.norm:
            for k in ['K', 'Na', 'Cl']:
                if k in d:
                    if 'i' not in d[k] or 'o' not in d[k]:
                        raise ValueError(f"Invalid structure for ion {k}")
                    m = max(d[k]['i'], d[k]['o'], 1e-10)
                    d[k]['i'] /= m
                    d[k]['o'] /= m
        return d
```

```python
import numpy as np
from typing import Dict, Optional

class Dataset:
    def __init__(self, data_path: Optional[str] = None):
        self.data_path = data_path
        self.data = {
            'V_m': np.array([-70.0, -50.0, 30.0, -80.0]),
            'Ca': np.array([0.0, 10e-6, 20e-6, 0.0]),
            't': np.linspace(0, 0.05, 4)
        }

    def load(self) -> Dict[str, np.ndarray]:
        return self.data
```

```python
import numpy as np
from typing import Dict, List

class BioinformaticData:
    def __init__(self, genes: List[str] = ['SCN', 'KCN', 'CACNA']):
        self.genes = genes
        self.exp = {g: np.random.rand(100) for g in genes}

    def compute_exp(self, tf: Dict[str, Dict[str, float]]) -> Dict[str, float]:
        k_syn, k_deg = 1.0, 0.1
        result = {}
        for g in self.genes:
            p = 1.0
            for _, v in tf.items():
                if 'conc' not in v or 'n' not in v or 'K' not in v:
                    raise ValueError("Invalid transcription factor structure")
                p *= (v['conc']**v['n']) / (v['K']**v['n'] + v['conc']**v['n'] + 1e-10)
            result[g] = k_syn * p - k_deg * np.mean(self.exp[g])
        return result
```

```python
import logging
import yaml
from typing import Optional

class Logger:
    def __init__(self, config_path: str = 'configs/logging.yaml'):
        with open(config_path, 'r') as f:
            cfg = yaml.safe_load(f) or {}
        logging.basicConfig(
            level=cfg.get('level', 'INFO'),
            format='%(asctime)s %(levelname)s %(name)s: %(message)s',
            handlers=[logging.FileHandler(cfg.get('file', 'logs/app.log')), logging.StreamHandler()]
        )
        self.log = logging.getLogger('NeuralPotentialModel')

    def info(self, msg: str, **kwargs) -> None:
        self.log.info(msg, extra=kwargs)

    def error(self, msg: str, **kwargs) -> None:
        self.log.error(msg, extra=kwargs)
```

```python
import numpy as np
from sklearn.metrics import mean_squared_error
from typing import Tuple

class Metrics:
    @staticmethod
    def rmse(pred: np.ndarray, true: np.ndarray) -> float:
        if pred.shape != true.shape:
            raise ValueError("Array shapes must match")
        return np.sqrt(mean_squared_error(true, pred))

    @staticmethod
    def corr(pred: np.ndarray, true: np.ndarray) -> float:
        if pred.shape != true.shape:
            raise ValueError("Array shapes must match")
        return np.corrcoef(pred, true)[0, 1]
```

```python
import yaml
from typing import Dict

def load_config(path: str) -> Dict:
    try:
        with open(path, 'r') as f:
            return yaml.safe_load(f) or {}
    except FileNotFoundError:
        raise FileNotFoundError(f"Config file {path} not found")
```

```python
import matplotlib.pyplot as plt
from typing import Dict

class Visualizer:
    @staticmethod
    def plot(results: Dict[str, np.ndarray], path: str) -> None:
        plt.figure(figsize=(8, 5))
        for key, label in [('V_m', 'V_m (мВ)'), ('Ca', 'Ca (мкМ)'), ('release', 'Release'), ('fractal_noise', 'Noise')]:
            if key in results:
                plt.plot(results['t'], results[key] * (1e6 if key == 'Ca' else 1), label=label)
        plt.xlabel('Time (s)')
        plt.legend()
        plt.savefig(path, bbox_inches='tight')
        plt.close()
```

```python
from typing import List, Dict
from ..simulation import Simulator

class AblationStudy:
    def __init__(self, config_path: str):
        self.sim = Simulator(config_path)

    def run(self, param: str, values: List[float]) -> List[Dict[str, np.ndarray]]:
        results = []
        cfg = self.sim.config
        for v in values:
            cfg_copy = cfg.copy()
            cfg_copy['neural'][param] = v
            results.append(Simulator(cfg_copy).run())
        return results
```

```python
import time
import numpy as np
from typing import Dict
from ..simulation import Simulator

class Benchmark:
    def __init__(self, config_path: str):
        self.sim = Simulator(config_path)

    def run(self, n: int = 10) -> Dict[str, float]:
        times = []
        for _ in range(n):
            start = time.time()
            self.sim.run()
            times.append(time.time() - start)
        return {'mean': np.mean(times), 'std': np.std(times)}
```

```python
import numpy as np
from typing import List
from ..simulation import Simulator

class Reproducibility:
    def __init__(self, config_path: str, seed: int = 42):
        np.random.seed(seed)
        self.sim = Simulator(config_path)

    def check(self, n: int = 5) -> bool:
        results = [self.sim.run() for _ in range(n)]
        return all(np.allclose(results[0]['V_m'], r['V_m'], rtol=1e-5, atol=1e-8) for r in results[1:])
```

```yaml
neural:
  C_m: 1e-6
  g_Na: 120e-3
  g_K: 36e-3
  g_Ca: 0.3e-3
  g_leak: 0.3e-3
  E_Na: 55e-3
  E_K: -90e-3
  E_Ca: 120e-3
  E_leak: -70e-3
  k_buff: 100
  k_pump: 500
  n: 4
  K_d: 15e-6
rmp:
  temperature: 310
  permeability_K: 1.0
  permeability_Na: 0.04
  permeability_Cl: 0.45
fractal:
  beta: 1.8
  f_min: 1
  f_max: 1000
  n_freqs: 50
t_span: [0, 0.05]
I_ext: 10e-9
```

```yaml
level: INFO
file: logs/app.log
```

<xaiArtifact artifact_id="a0a6f289-0c32-4591-810c-cfb7dc39dc25" artifact_version_id="5724d137-e843-4f2c-8b6d-ed6600e74d04" title="requirements.txt" contentType="text/plain">
numpy>=1.24.0
scipy>=1.10.0
matplotlib>=3.7.0
pyyaml>=6.0.0
numba>=0.57.0
joblib>=1.2.0
</xaiArtifact>


pytest>=7.4.0
pytest-cov>=4.1.0
flake8>=6.0.0
black>=23.3.0
isort>=5.12.0


<xaiArtifact artifact_id="658d0c22-31af-4dd9-a954-e69ddf83cd51" artifact_version_id="4bf07f87-719c-4ec6-966a-c96c862c28c5" title="pyproject.toml" contentType="text/toml">
[project]
name = "neural_potential_model"
version = "1.0.0"
dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "matplotlib>=3.7.0",
    "pyyaml>=6.0.0",
    "numba>=0.57.0",
    "joblib>=1.2.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "flake8>=6.0.0",
    "black>=23.3.0",
    "isort>=5.12.0"
]
</xaiArtifact>

```python
from setuptools import setup, find_packages

setup(
    name="neural_potential_model",
    version="1.0.0",
    packages=find_packages(where="src"),
    package_dir={"": "src"},
    install_requires=[
        "numpy>=1.24.0",
        "scipy>=1.10.0",
        "matplotlib>=3.7.0",
        "pyyaml>=6.0.0",
        "numba>=0.57.0",
        "joblib>=1.2.0"
    ],
    extras_require={
        "dev": [
            "pytest>=7.4.0",
            "pytest-cov>=4.1.0",
            "flake8>=6.0.0",
            "black>=23.3.0",
            "isort>=5.12.0"
        ]
    }
)
```


__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.env
*.log
*.png
coverage/
dist/
build/
*.egg-info/


<xaiArtifact artifact_id="77615085-749f-4c44-81e8-31c5515f9f7d" artifact_version_id="96d85d4f-be3b-415f-bbf4-fd900962ec3c" title=".env.example" contentType="text/plain">
LOG_LEVEL=INFO
</xaiArtifact>


# NeuralPotentialModel
Модель для симуляції потенціалів спокою та дії в пресинаптичних закінченнях ЦНС.

## Особливості
- Потенціал спокою (RMP) за рівнянням Гольдмана-Ходжкіна-Каца.
- Потенціал дії (AP) за адаптованою моделлю Ходжкіна-Хакслі.
- Кальцієва динаміка для вивільнення нейротрансмітерів.
- Фрактальний шум для моделювання стохастичної поведінки.
- Геометричне моделювання пресинаптичного закінчення.

## Встановлення
```bash
pip install -r requirements.txt
```

## Використання
```python
from neural_potential_model import Simulator
sim = Simulator("configs/model.yaml")
results = sim.run()
Visualizer.plot(results, "output.png")
```

## Формули
- **RMP**:
  \[
  V_m = \frac{RT}{F} \ln \left( \frac{P_K [K^+]_o + P_{Na} [Na^+]_o + P_{Cl} [Cl^-]_i}{P_K [K^+]_i + P_{Na} [Na^+]_i + P_{Cl} [Cl^-]_o} \right)
  \]
- **AP**:
  \[
  C_m \frac{dV_m}{dt} = -I_{Na} - I_K - I_{Ca} - I_{leak} + I_{ext}
  \]
  \[
  I_X = g_X m^p h^q (V_m - E_X)
  \]
- **Кальцієва динаміка**:
  \[
  \frac{d[Ca^{2+}]_i}{dt} = I_{Ca} - k_{buff} [Ca^{2+}]_i - k_{pump} [Ca^{2+}]_i
  \]
  \[
  R = \frac{[Ca^{2+}]_i^n}{K_d^n + [Ca^{2+}]_i^n}
  \]
- **Фрактальний шум**:
  \[
  V_m(t) = \sum_k a_k \sin(2\pi f_k t + \phi_k), \quad a_k \propto f_k^{-\beta/2}
  \]
- **Геометрія**:
  \[
  \lambda^2 \frac{\partial^2 V_m}{\partial x^2} = \tau_m \frac{\partial V_m}{\partial t} + V_m
  \]

## Ліцензія
MIT



# Внесок

## Налаштування
```bash
git clone <url>
pip install -r requirements-dev.txt
```

## Код
- PEP 8, Black, Flake8.
- Функції ≤ 15 рядків, класи ≤ 150.
- Тести >99% покриття.

## Процес
1. Гілка: `git checkout -b feature/xyz`.
2. Коміт: `git commit -m 'Опис'`.
3. PR з детальним описом.

## Тести
```bash
pytest --cov=src
```



# Кодекс поведінки

## Стандарти
- Повага та інклюзивність.
- Доброзичлива мова.
- Конструктивна критика.

## Порушення
- Повідомлення: conduct@example.com.


<xaiArtifact artifact_id="012e2f41-d0c6-4d8b-8ee9-ebb213d1c467" artifact_version_id="fea24e14-f9b7-4781-ae36-3699005b5da6" title="SECURITY.md" contentType="text/markdown">
# Безпека

## Версії
| Версія | Підтримка |
|--------|-----------|
| 1.0.0  | ✅        |

## Вразливості
- Контакт: security@example.com
- Відповідь: 48 годин
</xaiArtifact>


MIT License

Copyright (c) 2025 NeuralPotentialModel Contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



# Changelog

## [1.0.0] - 2025-07-03
- Initial RMP and AP model.
- Added calcium and fractal dynamics.
- Implemented geometric modeling.
- Optimized with Numba and RK23.



.PHONY: install test lint coverage

install:
	pip install -r requirements.txt -r requirements-dev.txt

test:
	pytest --cov=src --cov-report=xml

lint:
	flake8 src tests
	black --check src tests
	isort --check-only src tests

coverage:
	pytest --cov=src --cov-report=html


```yaml
name: CI
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install
        run: make install
      - name: Lint
        run: make lint
      - name: Test
        run: make test
      - name: Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
```

```yaml
name: CD
on:
  push:
    branches: [ main ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push
        run: |
          docker build -t neuralpotentialmodel:latest .
          docker push neuralpotentialmodel:latest
```

```yaml
name: Model Validation
on:
  push:
    branches: [ main, develop ]
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install
        run: pip install -r requirements.txt
      - name: Validate
        run: python scripts/validate_model.py
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: validation-results
          path: validation_results/
```

```yaml
name: Security Scan
on:
  push:
    branches: [ main, develop ]
jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r src
```

```yaml
name: Dependency Update
on:
  schedule:
    - cron: "0 0 * * *"
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Update
        uses: dependabot/dependabot-core@v2
        with:
          package-ecosystem: "pip"
          directory: "/"
          schedule-interval: "daily"
```

```yaml
name: Release
on:
  push:
    tags:
      - 'v*'
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install
        run: pip install -r requirements.txt
      - name: Build and Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
```

```yaml
name: Deploy Docs
on:
  push:
    branches: [ main ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install
        run: pip install sphinx
      - name: Build Docs
        run: make docs
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build
```

```yaml
name: Benchmarks
on:
  push:
    branches: [ main, develop ]
jobs:
  benchmark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install
        run: pip install -r requirements.txt
      - name: Run Benchmarks
        run: python scripts/benchmark.py
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results/
```


# Моделі

## RestingMembranePotential
\[
V_m = \frac{RT}{F} \ln \left( \frac{P_K [K^+]_o + P_{Na} [Na^+]_o + P_{Cl} [Cl^-]_i}{P_K [K^+]_i + P_{Na} [Na^+]_i + P_{Cl} [Cl^-]_o} \right)
\]
- `compute() -> float`: RMP у мВ.

## NeuralPotentialModel
\[
C_m \frac{dV_m}{dt} = -I_{Na} - I_K - I_{Ca} - I_{leak} + I_{ext}
\]
\[
I_X = g_X m^p h^q (V_m - E_X)
\]
\[
\frac{d[Ca^{2+}]_i}{dt} = I_{Ca} - k_{buff} [Ca^{2+}]_i - k_{pump} [Ca^{2+}]_i
\]
- `simulate(t_span, I_ext, initial_state) -> dict`: Симуляція.

## CalciumDynamics
\[
R = \frac{[Ca^{2+}]_i^n}{K_d^n + [Ca^{2+}]_i^n}
\]
- `release_rate(Ca) -> np.ndarray`: Швидкість.

## FractalDynamics
\[
V_m(t) = \sum_k a_k \sin(2\pi f_k t + \phi_k), \quad a_k \propto f_k^{-\beta/2}
\]
- `generate(t) -> np.ndarray`: Шум.



# Симуляції

## Simulator
- `run(I_ext) -> dict`: Одна симуляція.
- `run_parallel(I_ext_values) -> list`: Паралельні.

## Geometry
\[
\lambda^2 \frac{\partial^2 V_m}{\partial x^2} = \tau_m \frac{\partial V_m}{\partial t} + V_m
\]
- `area() -> float`: Площа.
- `channels(density) -> int`: Канали.
- `cable(V, x, r_m, r_i, C_m) -> np.ndarray`: Кабель.

## DistributedSimulator
- `run(I_ext_values) -> list`: Розподілені симуляції.



# Початок

1. Встановлення:
   ```bash
   pip install -r requirements.txt
   ```

2. Конфігурація: `configs/model.yaml`.

3. Симуляція:
   ```python
   from neural_potential_model import Simulator
   sim = Simulator("configs/model.yaml")
   results = sim.run()
   ```

4. Візуалізація:
   ```python
   from neural_potential_model.utils import Visualizer
   Visualizer.plot(results, "output.png")
   ```



# Симуляція

## Налаштування
`configs/model.yaml`

## Виконання
```python
sim = Simulator("configs/model.yaml")
results = sim.run()
```

## Паралельні
```python
results = sim.run_parallel([5e-9, 10e-9, 15e-9])
```

## Візуалізація
```python
Visualizer.plot(results, "output.png")
```



# Контриб’ютори

## Налаштування
```bash
git clone <url>
pip install -r requirements-dev.txt
```

## Код
- PEP 8, Black, Flake8.
- Функції ≤ 15 рядків, класи ≤ 150.
- Тести >99% покриття.

## Процес
1. Гілка: `git checkout -b feature/xyz`.
2. Коміт: `git commit -m 'Опис'`.
3. PR.

## Тести
```bash
pytest --cov=src
```



# Верифікація, валідація, фальсифікація, калібрація

## Верифікація
- Код: Тести, CI/CD.
- Числа: Збіжність RK23 (rtol=1e-6, atol=1e-8).
- Приклад:
  ```python
  def test_rmp():
      model = RestingMembranePotential()
      assert -75 < model.compute() < -65
  ```

## Калібрація
- Оптимізація параметрів.
- Приклад:
  ```python
  from scipy.optimize import minimize
  def calibrate(model, data):
      def obj(params):
          model.p['g_Na'] = params[0]
          r = model.simulate((0, 0.05))
          return Metrics.rmse(r['V_m'], data['V_m'])
      return minimize(obj, [120e-3]).x
  ```

## Валідація
- Порівняння з даними.
- Приклад:
  ```python
  def validate(model, data):
      r = model.simulate((0, 0.05))
      return Metrics.rmse(r['V_m'], data['V_m'])
  ```

## Фальсифікація
- Екстремальні умови.
- Приклад:
  ```python
  def falsify(model, data):
      r = model.simulate((0, 0.05), I_ext=100e-9)
      return np.all(np.abs(r['V_m'] - data['V_m']) < 5)
  ```


```python
from neural_potential_model import Simulator
from neural_potential_model.utils import Visualizer

sim = Simulator("configs/model.yaml")
results = sim.run()
Visualizer.plot(results, "output.png")
```

```x-ipynb+json
{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from neural_potential_model import Simulator\n",
        "from neural_potential_model.utils import Visualizer\n",
        "\n",
        "sim = Simulator(\"configs/model.yaml\")\n",
        "results = sim.run_parallel([5e-9, 10e-9, 15e-9])\n",
        "\n",
        "for i, r in enumerate(results):\n",
        "    Visualizer.plot(r, f\"sim_{i}.png\")"
      ],
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  }
}
```


# Експерименти

## Абляція
- `g_Na`: Вплив на амплітуду AP.

## Бенчмарки
- Час виконання: 0.05 с.
- Масштабування: Лінійне до 100 нейронів.

## Відтворюваність
- Фіксоване зерно для шуму.



# Бенчмарки

## Продуктивність
- Час: 0.05 с.
- Масштабування: Лінійне до 100 нейронів.


<xaiArtifact artifact_id="35654d27-8cc7-4a1f-9a3f-15b5f1b5141a" artifact_version_id="bef70f2f-39a3-4081-b4e6-323806ac040d" title="ablation_studies.md" contentType="text/markdown">
# Абляція

## g_Na
- 120e-3: Нормальний AP.
- 60e-3: Зниження амплітуди.
- 0: Без AP.
</xaiArtifact>

```python
import subprocess

def setup():
    subprocess.run(["pip", "install", "-r", "requirements.txt"], check=True)
    subprocess.run(["pip", "install", "-r", "requirements-dev.txt"], check=True)

if __name__ == "__main__":
    setup()
```

```python
from neural_potential_model import Simulator
from neural_potential_model.utils import Visualizer

if __name__ == "__main__":
    sim = Simulator("configs/model.yaml")
    results = sim.run()
    Visualizer.plot(results, "output.png")
```

```python
from neural_potential_model.experiments import Benchmark

if __name__ == "__main__":
    b = Benchmark("configs/model.yaml")
    r = b.run()
    print(f"Mean: {r['mean']:.3f} s, Std: {r['std']:.3f} s")
```

```python
from neural_potential_model import Simulator
from neural_potential_model.utils import Metrics
from neural_potential_model.data import Dataset

if __name__ == "__main__":
    sim = Simulator("configs/model.yaml")
    ds = Dataset()
    data = ds.load()
    r = sim.run()
    rmse = Metrics.rmse(r['V_m'], data['V_m'])
    print(f"RMSE: {rmse:.3f}")
```

```python
import pytest
import numpy as np
from neural_potential_model.models import RestingMembranePotential

def test_rmp_valid():
    model = RestingMembranePotential()
    V_m = model.compute()
    assert -75 < V_m < -65

def test_rmp_invalid_params():
    with pytest.raises(ValueError):
        RestingMembranePotential(C={'K': {'i': -1, 'o': 5e-3}})
```

```python
import pytest
import numpy as np
from neural_potential_model.models import NeuralPotentialModel

def test_neural_valid():
    params = {
        'C_m': 1e-6, 'g_Na': 120e-3, 'g_K': 36e-3, 'g_Ca': 0.3e-3, 'g_leak': 0.3e-3,
        'E_Na': 55e-3, 'E_K': -90e-3, 'E_Ca': 120e-3, 'E_leak': -70e-3,
        'k_buff': 100, 'k_pump': 500, 'n': 4, 'K_d': 15e-6
    }
    model = NeuralPotentialModel(params)
    r = model.simulate((0, 0.05))
    assert len(r['t']) == 500
    assert np.max(r['V_m']) > 0

def test_neural_invalid_params():
    params = {'C_m': -1}
    with pytest.raises(ValueError):
        NeuralPotentialModel(params)
```

```python
import pytest
import numpy as np
from neural_potential_model.models import CalciumDynamics

def test_calcium_valid():
    model = CalciumDynamics()
    Ca = np.array([0, 10e-6, 20e-6])
    r = model.release_rate(Ca)
    assert r.shape == Ca.shape
    assert np.all((0 <= r) & (r <= 1))

def test_calcium_invalid_params():
    with pytest.raises(ValueError):
        CalciumDynamics(k_buff=-1)
```

```python
import pytest
import numpy as np
from neural_potential_model.models import FractalDynamics

def test_fractal_valid():
    model = FractalDynamics()
    t = np.linspace(0, 0.05, 500)
    noise = model.generate(t)
    assert len(noise) == 500
    assert np.isclose(np.std(noise), 1.0, rtol=1e-2)

def test_fractal_invalid_params():
    with pytest.raises(ValueError):
        FractalDynamics(beta=-1)
```

```python
import pytest
from neural_potential_model import Simulator

def test_simulator_valid():
    sim = Simulator("configs/model.yaml")
    r = sim.run()
    assert all(k in r for k in ['t', 'V_m', 'Ca', 'release', 'fractal_noise'])
    assert len(r['t']) == 500

def test_simulator_invalid_config():
    with pytest.raises(ValueError):
        sim = Simulator("configs/model.yaml")
        sim.t_span = (0, -1)
        sim.run()
```

```python
import pytest
from neural_potential_model.data import Dataset, Preprocessor

def test_dataset():
    ds = Dataset()
    d = ds.load()
    assert 'V_m' in d
    assert 'Ca' in d

def test_preprocessor():
    p = Preprocessor()
    d = {'K': {'i': 140e-3, 'o': 5e-3}}
    r = p.process(d)
    assert r['K']['i'] <= 1
```

```python
import pytest
from neural_potential_model import Simulator
from neural_potential_model.utils import Metrics

def test_pipeline():
    sim = Simulator("configs/model.yaml")
    r = sim.run()
    d = {'V_m': r['V_m'], 'Ca': r['Ca']}
    assert Metrics.rmse(r['V_m'], d['V_m']) == 0
```

```python
import pytest
import numpy as np
from neural_potential_model import Simulator

def test_model():
    sim = Simulator("configs/model.yaml")
    r = sim.run()
    assert len(r['t']) == 500
    assert np.max(r['V_m']) > 0
```


# PR

## Зміни
- Опишіть зміни.

## Тести
- Додайте тести.

## Документація
- Оновіть документацію.


<xaiArtifact artifact_id="3ed0dbc6-f166-46a4-8a2d-931cd0ca1c47" artifact_version_id="2af9ad92-40f6-437b-b2e5-6f4cb0a31840" title="FUNDING.yml" contentType="text/yaml">
github: [xai-org]
</xaiArtifact>

```yaml
version: 2
updates:
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "daily"
```

<xaiArtifact artifact_id="9d8a438f-c4db-4503-a86a-58d366114e7a" artifact_version_id="d65f16b1-0aee-4f2a-84b0-54be841f7794" title="renovate.json" contentType="application/json">
{
  "extends": ["config:base"],
  "schedule": ["at any time"],
  "packageRules": [{"packagePatterns": ["*"], "enabled": true}]
}
</xaiArtifact>

```yaml
name: Bug Report
description: Повідомлення про помилку
title: "[BUG] <опис>"
labels: ["bug"]
body:
  - type: textarea
    attributes:
      label: Опис
      description: Детальний опис помилки.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Кроки відтворення
      description: Як відтворити помилку.
    validations:
      required: true
```

```yaml
name: Feature Request
description: Пропозиція функції
title: "[FEATURE] <опис>"
labels: ["enhancement"]
body:
  - type: textarea
    attributes:
      label: Опис
      description: Опишіть функцію.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Випадки
      description: Для чого потрібна функція.
    validations:
      required: true
```

```yaml
name: Model Issue
description: Проблема з моделлю
title: "[MODEL] <опис>"
labels: ["model"]
body:
  - type: textarea
    attributes:
      label: Опис
      description: Детальний опис проблеми.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Дані
      description: Дані, що викликають проблему.
    validations:
      required: true
```

```yaml
name: Performance Issue
description: Проблема продуктивності
title: "[PERFORMANCE] <опис>"
labels: ["performance"]
body:
  - type: textarea
    attributes:
      label: Опис
      description: Детальний опис проблеми.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Метрики
      description: Метрики продуктивності.
    validations:
      required: true
```

```yaml
name: Research Question
description: Питання для дослідження
title: "[RESEARCH] <опис>"
labels: ["research"]
body:
  - type: textarea
    attributes:
      label: Питання
      description: Формулювання питання.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Контекст
      description: Контекст питання.
    validations:
      required: true
```
